{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub\\\\CodingKirby-s-MacBook\\\\client\\\\src\\\\contexts\\\\MusicContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useRef, useState, useCallback, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst imgUrl = process.env.REACT_APP_IMAGE_URL;\nconst mp3Url = process.env.REACT_APP_MUSIC_URL;\n// 음원 정보\nconst trackUrls = [`${mp3Url}/1.mp3`, `${mp3Url}/2.mp3`, `${mp3Url}/3.mp3`, `${mp3Url}/4.mp3`, `${mp3Url}/5.mp3`, `${mp3Url}/6.mp3`, `${mp3Url}/7.mp3`];\nexport const albums = [\"Spirited Away\", \"Spirited Away\", \"Howl's Moving Castle\", \"Yiruma\", \"Yiruma\", \"Higurashi When They Cry\", \"Inuyasha\"];\nexport const trackNames = [\"Inochi No Namae\", \"Itsumo Nando Demo\", \"Merry-Go-Round of Life\", \"Kiss the Rain\", \"River Flows in You\", \"You\", \"Affections Touching Across Time\"];\nexport const albumArtworks = [`${imgUrl}/Album_1.png`, `${imgUrl}/Album_2.png`, `${imgUrl}/Album_3.png`, `${imgUrl}/Album_4.png`, `${imgUrl}/Album_5.png`, `${imgUrl}/Album_6.png`, `${imgUrl}/Album_7.png`];\n\n// 음악 상태와 제어 함수 타입 정의\n\nconst MusicContext = /*#__PURE__*/createContext(undefined);\nexport const useMusic = () => {\n  _s();\n  const context = useContext(MusicContext);\n  if (!context) {\n    throw new Error('useMusic must be used within MusicProvider');\n  }\n  return context;\n};\n_s(useMusic, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const MusicProvider = ({\n  children\n}) => {\n  _s2();\n  const audioRef = useRef(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTrack, setCurrentTrack] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [isBuffering, setIsBuffering] = useState(false);\n  const [volume, setVolume] = useState(1); // 초기 볼륨 1(100%)으로 설정\n\n  // 상태 업데이트\n  const togglePlayPause = useCallback(() => {\n    if (audioRef.current) {\n      if (isPlaying) {\n        audioRef.current.pause();\n      } else {\n        audioRef.current.play();\n      }\n      setIsPlaying(!isPlaying);\n    }\n  }, [isPlaying]);\n  const playNextTrack = useCallback(() => {\n    setCurrentTrack(prev => (prev + 1) % trackUrls.length);\n    setCurrentTime(0);\n    // 트랙 변경 후 자동 재생\n    setTimeout(() => {\n      if (audioRef.current) {\n        audioRef.current.play();\n      }\n      setIsPlaying(true);\n    }, 0); // 트랙 변경 후 바로 재생\n  }, []);\n  const playPreviousTrack = useCallback(() => {\n    setCurrentTrack(prev => (prev - 1 + trackUrls.length) % trackUrls.length);\n    setCurrentTime(0);\n    // 트랙 변경 후 자동 재생\n    setTimeout(() => {\n      if (audioRef.current) {\n        audioRef.current.play();\n      }\n      setIsPlaying(true);\n    }, 0); // 트랙 변경 후 바로 재생\n  }, []);\n  const seekTo = time => {\n    if (audioRef.current) {\n      audioRef.current.currentTime = time;\n      setCurrentTime(time);\n    }\n  };\n\n  // 시간 업데이트\n  const handleTimeUpdate = () => {\n    const audio = audioRef.current;\n    if (audio && !isNaN(audio.duration)) {\n      setCurrentTime(audio.currentTime);\n      setDuration(audio.duration);\n    }\n  };\n  useEffect(() => {\n    const audio = audioRef.current;\n    if (audio) {\n      audio.src = trackUrls[currentTrack];\n      audio.addEventListener('timeupdate', handleTimeUpdate);\n      audio.addEventListener('canplay', () => setIsBuffering(false));\n      audio.addEventListener('waiting', () => setIsBuffering(true));\n      audio.addEventListener('ended', playNextTrack);\n      return () => {\n        audio.removeEventListener('timeupdate', handleTimeUpdate);\n        audio.removeEventListener('canplay', () => setIsBuffering(false));\n        audio.removeEventListener('waiting', () => setIsBuffering(true));\n        audio.removeEventListener('ended', playNextTrack);\n      };\n    }\n  }, [currentTrack, playNextTrack]);\n\n  // 시각 상태 업데이트 함수\n  const updatePlayerVisualState = useCallback((isActive, playerTrack, albumArt, titleBar) => {\n    if (isActive) {\n      playerTrack.classList.add(\"active\");\n      albumArt.classList.add(\"active\");\n      titleBar.style.top = \"-35px\";\n    } else {\n      playerTrack.classList.remove(\"active\");\n      albumArt.classList.remove(\"active\");\n      titleBar.style.top = \"0px\";\n    }\n  }, []);\n\n  // 음악을 종료하고 상태 초기화\n  const stopAndReset = useCallback(() => {\n    if (audioRef.current) {\n      audioRef.current.pause();\n      audioRef.current.currentTime = 0;\n    }\n    setIsPlaying(false);\n    setCurrentTime(0);\n    setCurrentTrack(0);\n  }, []);\n\n  // 볼륨 변경 함수\n  const handleVolumeChange = newVolume => {\n    if (audioRef.current) {\n      audioRef.current.volume = newVolume;\n    }\n    setVolume(newVolume);\n  };\n  return /*#__PURE__*/_jsxDEV(MusicContext.Provider, {\n    value: {\n      isPlaying,\n      currentTrack,\n      currentTime,\n      duration,\n      isBuffering,\n      volume,\n      togglePlayPause,\n      playNextTrack,\n      playPreviousTrack,\n      seekTo,\n      updatePlayerVisualState,\n      stopAndReset,\n      setVolume: handleVolumeChange\n    },\n    children: [children, /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n};\n_s2(MusicProvider, \"XIHPGCUQekNMnZ2JEqngtqtWi/k=\");\n_c = MusicProvider;\nvar _c;\n$RefreshReg$(_c, \"MusicProvider\");","map":{"version":3,"names":["React","createContext","useContext","useRef","useState","useCallback","useEffect","jsxDEV","_jsxDEV","imgUrl","process","env","REACT_APP_IMAGE_URL","mp3Url","REACT_APP_MUSIC_URL","trackUrls","albums","trackNames","albumArtworks","MusicContext","undefined","useMusic","_s","context","Error","MusicProvider","children","_s2","audioRef","isPlaying","setIsPlaying","currentTrack","setCurrentTrack","currentTime","setCurrentTime","duration","setDuration","isBuffering","setIsBuffering","volume","setVolume","togglePlayPause","current","pause","play","playNextTrack","prev","length","setTimeout","playPreviousTrack","seekTo","time","handleTimeUpdate","audio","isNaN","src","addEventListener","removeEventListener","updatePlayerVisualState","isActive","playerTrack","albumArt","titleBar","classList","add","style","top","remove","stopAndReset","handleVolumeChange","newVolume","Provider","value","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/GitHub/CodingKirby-s-MacBook/client/src/contexts/MusicContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useRef, useState, useCallback, useEffect } from 'react';\r\n\r\nconst imgUrl = process.env.REACT_APP_IMAGE_URL;\r\nconst mp3Url = process.env.REACT_APP_MUSIC_URL;\r\n// 음원 정보\r\nconst trackUrls = [\r\n  `${mp3Url}/1.mp3`, `${mp3Url}/2.mp3`, `${mp3Url}/3.mp3`,\r\n  `${mp3Url}/4.mp3`, `${mp3Url}/5.mp3`, `${mp3Url}/6.mp3`, `${mp3Url}/7.mp3`];\r\nexport const albums = [\"Spirited Away\", \"Spirited Away\", \"Howl's Moving Castle\", \"Yiruma\", \"Yiruma\", \"Higurashi When They Cry\", \"Inuyasha\"];\r\nexport const trackNames = [\"Inochi No Namae\", \"Itsumo Nando Demo\", \"Merry-Go-Round of Life\", \"Kiss the Rain\", \"River Flows in You\", \"You\", \"Affections Touching Across Time\"];\r\nexport const albumArtworks = [\r\n  `${imgUrl}/Album_1.png`, `${imgUrl}/Album_2.png`, `${imgUrl}/Album_3.png`,\r\n  `${imgUrl}/Album_4.png`, `${imgUrl}/Album_5.png`, `${imgUrl}/Album_6.png`, `${imgUrl}/Album_7.png`];\r\n\r\n// 음악 상태와 제어 함수 타입 정의\r\ninterface MusicContextType {\r\n  isPlaying: boolean;\r\n  currentTrack: number;\r\n  currentTime: number;\r\n  duration: number;\r\n  isBuffering: boolean;\r\n  volume: number; // 볼륨 상태 추가\r\n  togglePlayPause: () => void;\r\n  playNextTrack: () => void;\r\n  playPreviousTrack: () => void;\r\n  seekTo: (time: number) => void;\r\n  updatePlayerVisualState: (isActive: boolean, playerTrack: HTMLElement, albumArt: HTMLElement, titleBar: HTMLElement) => void;\r\n  stopAndReset: () => void;\r\n  setVolume: (volume: number) => void; // 볼륨 제어 함수 추가\r\n}\r\n\r\nconst MusicContext = createContext<MusicContextType | undefined>(undefined);\r\n\r\nexport const useMusic = () => {\r\n  const context = useContext(MusicContext);\r\n  if (!context) {\r\n    throw new Error('useMusic must be used within MusicProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const MusicProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const audioRef = useRef<HTMLAudioElement | null>(null);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [currentTrack, setCurrentTrack] = useState(0);\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n  const [duration, setDuration] = useState(0);\r\n  const [isBuffering, setIsBuffering] = useState(false);\r\n  const [volume, setVolume] = useState(1); // 초기 볼륨 1(100%)으로 설정\r\n\r\n  // 상태 업데이트\r\n  const togglePlayPause = useCallback(() => {\r\n    if (audioRef.current) {\r\n      if (isPlaying) {\r\n        audioRef.current.pause();\r\n      } else {\r\n        audioRef.current.play();\r\n      }\r\n      setIsPlaying(!isPlaying);\r\n    }\r\n  }, [isPlaying]);\r\n\r\n  const playNextTrack = useCallback(() => {\r\n    setCurrentTrack((prev) => (prev + 1) % trackUrls.length);\r\n    setCurrentTime(0);\r\n    // 트랙 변경 후 자동 재생\r\n    setTimeout(() => {\r\n      if (audioRef.current) {\r\n        audioRef.current.play();\r\n      }\r\n      setIsPlaying(true);\r\n    }, 0); // 트랙 변경 후 바로 재생\r\n  }, []);\r\n\r\n  const playPreviousTrack = useCallback(() => {\r\n    setCurrentTrack((prev) => (prev - 1 + trackUrls.length) % trackUrls.length);\r\n    setCurrentTime(0);\r\n    // 트랙 변경 후 자동 재생\r\n    setTimeout(() => {\r\n      if (audioRef.current) {\r\n        audioRef.current.play();\r\n      }\r\n      setIsPlaying(true);\r\n    }, 0); // 트랙 변경 후 바로 재생\r\n  }, []);\r\n\r\n  const seekTo = (time: number) => {\r\n    if (audioRef.current) {\r\n      audioRef.current.currentTime = time;\r\n      setCurrentTime(time);\r\n    }\r\n  };\r\n\r\n  // 시간 업데이트\r\n  const handleTimeUpdate = () => {\r\n    const audio = audioRef.current;\r\n    if (audio && !isNaN(audio.duration)) {\r\n      setCurrentTime(audio.currentTime);\r\n      setDuration(audio.duration);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const audio = audioRef.current;\r\n    if (audio) {\r\n      audio.src = trackUrls[currentTrack];\r\n      audio.addEventListener('timeupdate', handleTimeUpdate);\r\n      audio.addEventListener('canplay', () => setIsBuffering(false));\r\n      audio.addEventListener('waiting', () => setIsBuffering(true));\r\n      audio.addEventListener('ended', playNextTrack);\r\n\r\n      return () => {\r\n        audio.removeEventListener('timeupdate', handleTimeUpdate);\r\n        audio.removeEventListener('canplay', () => setIsBuffering(false));\r\n        audio.removeEventListener('waiting', () => setIsBuffering(true));\r\n        audio.removeEventListener('ended', playNextTrack);\r\n      };\r\n    }\r\n  }, [currentTrack, playNextTrack]);\r\n\r\n  // 시각 상태 업데이트 함수\r\n  const updatePlayerVisualState = useCallback((isActive: boolean, playerTrack: HTMLElement, albumArt: HTMLElement, titleBar: HTMLElement) => {\r\n    if (isActive) {\r\n      playerTrack.classList.add(\"active\");\r\n      albumArt.classList.add(\"active\");\r\n      titleBar.style.top = \"-35px\";\r\n    } else {\r\n      playerTrack.classList.remove(\"active\");\r\n      albumArt.classList.remove(\"active\");\r\n      titleBar.style.top = \"0px\";\r\n    }\r\n  }, []);  \r\n\r\n  // 음악을 종료하고 상태 초기화\r\n  const stopAndReset = useCallback(() => {\r\n    if (audioRef.current) {\r\n      audioRef.current.pause();\r\n      audioRef.current.currentTime = 0;\r\n    }\r\n    setIsPlaying(false);\r\n    setCurrentTime(0);\r\n    setCurrentTrack(0);\r\n  }, []);\r\n\r\n  // 볼륨 변경 함수\r\n  const handleVolumeChange = (newVolume: number) => {\r\n    if (audioRef.current) {\r\n      audioRef.current.volume = newVolume;\r\n    }\r\n    setVolume(newVolume);\r\n  };\r\n\r\n  return (\r\n    <MusicContext.Provider value={{\r\n        isPlaying, currentTrack, currentTime, duration, isBuffering, volume,\r\n        togglePlayPause, playNextTrack, playPreviousTrack,\r\n        seekTo, updatePlayerVisualState, stopAndReset,\r\n        setVolume: handleVolumeChange }}>\r\n      {children}\r\n      <audio ref={audioRef} />\r\n    </MusicContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}