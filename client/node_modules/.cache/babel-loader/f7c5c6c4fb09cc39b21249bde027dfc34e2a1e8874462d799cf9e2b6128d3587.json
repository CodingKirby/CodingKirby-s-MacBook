{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub\\\\CodingKirby-s-MacBook\\\\client\\\\src\\\\components\\\\common\\\\Dock.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport DockItem from './DockItem';\nimport '../../styles/Dock.css';\nimport { useAppState } from '../../contexts/AppContext';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../../styles/Toast.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst imgUrl = process.env.REACT_APP_IMAGE_URL;\nconst Dock = () => {\n  _s();\n  const {\n    apps,\n    openApp,\n    maximizeApp,\n    bringAppToFront\n  } = useAppState();\n  const [hiddenItems, setHiddenItems] = useState([]);\n  const [dockWidth, setDockWidth] = useState(window.innerWidth);\n  const [isLaunchpadOpen, setIsLaunchpadOpen] = useState(false); // 모달 상태 관리\n  const [isSharing, setIsSharing] = useState(false); // share 앱의 인디케이터 상태 관리\n\n  const dockItems = [{\n    name: 'finder',\n    icon: `${imgUrl}/finder.png`\n  }, {\n    name: 'music',\n    icon: `${imgUrl}/music.png`\n  }, {\n    name: 'safari',\n    icon: `${imgUrl}/safari.png`\n  }, {\n    name: 'photos',\n    icon: `${imgUrl}/photos.png`\n  }, {\n    name: 'messages',\n    icon: `${imgUrl}/messages.png`\n  }, {\n    name: 'memo',\n    icon: `${imgUrl}/memo.png`\n  }, {\n    name: 'github',\n    icon: `${imgUrl}/github.png`\n  }, {\n    name: 'blog',\n    icon: `${imgUrl}/blog.png`\n  }, {\n    name: 'notion',\n    icon: `${imgUrl}/notion.png`\n  }, {\n    name: 'mail',\n    icon: `${imgUrl}/mail.png`\n  }, {\n    name: 'share',\n    icon: `${imgUrl}/share.png`\n  }, {\n    name: 'settings',\n    icon: `${imgUrl}/settings.png`\n  }];\n  useEffect(() => {\n    const handleResize = () => {\n      setDockWidth(window.innerWidth);\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n  useEffect(() => {\n    const availableWidth = dockWidth - 300;\n    const maxItems = Math.floor(availableWidth / 100);\n    if (dockItems.length > maxItems) {\n      const hidden = dockItems.slice(maxItems).map(item => item.name);\n      setHiddenItems(hidden);\n    } else {\n      setHiddenItems([]);\n    }\n  }, [dockWidth]);\n  const handleAppOpen = appName => {\n    const appState = apps[appName];\n    bringAppToFront(appName);\n    if (appName === 'notion') {\n      // Notion 페이지로 새 탭에서 이동\n      window.open('https://calico-octave-0a0.notion.site/62b2692248d045bdb1796368054b3ac2?pvs=74', '_blank');\n      return;\n    }\n    if (appName === 'share') {\n      // share 앱 클릭 시 Toast 메시지 표시\n      navigator.clipboard.writeText(window.location.href);\n      setIsSharing(true); // Toast 표시 시 인디케이터 활성화\n\n      toast.info('링크가 복사되었습니다!', {\n        className: 'custom-toast',\n        // 커스텀 클래스 적용\n        progressClassName: 'custom-toast-progress',\n        // 커스텀 클래스 적용\n        onClose: () => setIsSharing(false) // Toast가 닫힐 때 인디케이터 비활성화\n      });\n    } else if (appState.isRunning) {\n      maximizeApp(appName);\n    } else {\n      openApp(appName);\n    }\n  };\n  const handleLaunchpadClick = () => {\n    if (hiddenItems.length > 0) {\n      setIsLaunchpadOpen(!isLaunchpadOpen); // 숨겨진 앱이 있을 때만 Launchpad 모달 열고 닫기\n    } else {\n      setIsLaunchpadOpen(false); // 숨겨진 앱이 없으면 모달을 닫음\n    }\n  };\n  const closeLaunchpad = () => {\n    setIsLaunchpadOpen(false); // 모달 닫기\n  };\n\n  // 모달 외부 클릭 시 모달을 닫음\n  const handleOutsideClick = e => {\n    const target = e.target;\n    if (target.classList.contains('launchpad-modal')) {\n      closeLaunchpad();\n    }\n  };\n\n  // Launchpad 내에서의 share 앱 상태를 따로 관리 (Launchpad 안에서는 인디케이터 표시 안 함)\n  const getLaunchpadAppState = appName => {\n    if (appName === 'share') {\n      return isSharing; // share 앱의 경우 인디케이터는 isSharing 상태에 따름\n    }\n    return apps[appName].isRunning; // Launchpad 내에서도 앱이 실행 중이면 인디케이터 유지\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ToastContainer, {\n      position: \"top-right\",\n      autoClose: 1200,\n      hideProgressBar: true,\n      newestOnTop: false,\n      closeOnClick: true,\n      pauseOnFocusLoss: true,\n      draggable: true,\n      pauseOnHover: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dock\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dock-left\",\n        children: dockItems.map(item => !hiddenItems.includes(item.name) && /*#__PURE__*/_jsxDEV(DockItem, {\n          icon: item.icon\n          // share 앱에만 isSharing 적용\n          ,\n          isActive: item.name === 'share' ? isSharing : apps[item.name].isRunning,\n          isHidden: hiddenItems.includes(item.name),\n          onClick: () => handleAppOpen(item.name)\n        }, item.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dock-left-end\",\n        children: /*#__PURE__*/_jsxDEV(DockItem, {\n          icon: `${imgUrl}/launchpad.png`,\n          isActive: false // Launchpad 열렸을 때만 인디케이터 활성화\n          ,\n          isHidden: false,\n          onClick: handleLaunchpadClick // Launchpad 클릭 시 모달 열기\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dock-right\",\n        children: /*#__PURE__*/_jsxDEV(DockItem, {\n          icon: `${imgUrl}/bin.png`,\n          isActive: false,\n          isHidden: false,\n          onClick: () => console.log('Bin clicked')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), isLaunchpadOpen && hiddenItems.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"launchpad-modal\",\n      onClick: handleOutsideClick,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"launchpad-content\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hidden-apps\",\n          children: hiddenItems.map(hiddenItem => {\n            var _dockItems$find;\n            return /*#__PURE__*/_jsxDEV(DockItem, {\n              icon: ((_dockItems$find = dockItems.find(item => item.name === hiddenItem)) === null || _dockItems$find === void 0 ? void 0 : _dockItems$find.icon) || '',\n              isActive: getLaunchpadAppState(hiddenItem) // Launchpad 내 숨겨진 앱의 인디케이터만 표시\n              ,\n              isHidden: false,\n              onClick: () => handleAppOpen(hiddenItem)\n            }, hiddenItem, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n_s(Dock, \"4NyT7nnNZ1cfIROCKqtL9FwI0Ig=\", false, function () {\n  return [useAppState];\n});\n_c = Dock;\nexport default Dock;\nvar _c;\n$RefreshReg$(_c, \"Dock\");","map":{"version":3,"names":["React","useEffect","useState","DockItem","useAppState","ToastContainer","toast","jsxDEV","_jsxDEV","imgUrl","process","env","REACT_APP_IMAGE_URL","Dock","_s","apps","openApp","maximizeApp","bringAppToFront","hiddenItems","setHiddenItems","dockWidth","setDockWidth","window","innerWidth","isLaunchpadOpen","setIsLaunchpadOpen","isSharing","setIsSharing","dockItems","name","icon","handleResize","addEventListener","removeEventListener","availableWidth","maxItems","Math","floor","length","hidden","slice","map","item","handleAppOpen","appName","appState","open","navigator","clipboard","writeText","location","href","info","className","progressClassName","onClose","isRunning","handleLaunchpadClick","closeLaunchpad","handleOutsideClick","e","target","classList","contains","getLaunchpadAppState","children","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","pauseOnFocusLoss","draggable","pauseOnHover","fileName","_jsxFileName","lineNumber","columnNumber","includes","isActive","isHidden","onClick","console","log","hiddenItem","_dockItems$find","find","_c","$RefreshReg$"],"sources":["D:/GitHub/CodingKirby-s-MacBook/client/src/components/common/Dock.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport DockItem from './DockItem';\r\nimport '../../styles/Dock.css';\r\nimport { useAppState } from '../../contexts/AppContext';\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport '../../styles/Toast.css';\r\n\r\nconst imgUrl = process.env.REACT_APP_IMAGE_URL;\r\n\r\nconst Dock: React.FC = () => {\r\n  const { apps, openApp, maximizeApp, bringAppToFront } = useAppState();\r\n  const [hiddenItems, setHiddenItems] = useState<string[]>([]); \r\n  const [dockWidth, setDockWidth] = useState(window.innerWidth);\r\n  const [isLaunchpadOpen, setIsLaunchpadOpen] = useState(false); // 모달 상태 관리\r\n  const [isSharing, setIsSharing] = useState(false); // share 앱의 인디케이터 상태 관리\r\n\r\n  const dockItems = [\r\n    { name: 'finder', icon: `${imgUrl}/finder.png` },\r\n    { name: 'music', icon: `${imgUrl}/music.png` },\r\n    { name: 'safari', icon: `${imgUrl}/safari.png` },\r\n    { name: 'photos', icon: `${imgUrl}/photos.png` },\r\n    { name: 'messages', icon: `${imgUrl}/messages.png` },\r\n    { name: 'memo', icon: `${imgUrl}/memo.png` },\r\n    { name: 'github', icon: `${imgUrl}/github.png` },\r\n    { name: 'blog', icon: `${imgUrl}/blog.png` },\r\n    { name: 'notion', icon: `${imgUrl}/notion.png` },\r\n    { name: 'mail', icon: `${imgUrl}/mail.png` },\r\n    { name: 'share', icon: `${imgUrl}/share.png` },\r\n    { name: 'settings', icon: `${imgUrl}/settings.png` },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setDockWidth(window.innerWidth);\r\n    };\r\n    window.addEventListener('resize', handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const availableWidth = dockWidth - 300;\r\n    const maxItems = Math.floor(availableWidth / 100);\r\n\r\n    if (dockItems.length > maxItems) {\r\n      const hidden = dockItems.slice(maxItems).map(item => item.name);\r\n      setHiddenItems(hidden);\r\n    } else {\r\n      setHiddenItems([]);\r\n    }\r\n  }, [dockWidth]);\r\n\r\n  const handleAppOpen = (appName: string) => {\r\n    const appState = apps[appName as keyof typeof apps];\r\n\r\n    bringAppToFront(appName as keyof typeof apps);\r\n\r\n    if (appName === 'notion') {\r\n      // Notion 페이지로 새 탭에서 이동\r\n      window.open('https://calico-octave-0a0.notion.site/62b2692248d045bdb1796368054b3ac2?pvs=74', '_blank');\r\n      return;\r\n    }\r\n\r\n    if (appName === 'share') {\r\n      // share 앱 클릭 시 Toast 메시지 표시\r\n      navigator.clipboard.writeText(window.location.href);\r\n      setIsSharing(true); // Toast 표시 시 인디케이터 활성화\r\n\r\n      toast.info('링크가 복사되었습니다!', {\r\n        className: 'custom-toast', // 커스텀 클래스 적용\r\n        progressClassName: 'custom-toast-progress', // 커스텀 클래스 적용\r\n        onClose: () => setIsSharing(false), // Toast가 닫힐 때 인디케이터 비활성화\r\n      });\r\n    } else if (appState.isRunning) {\r\n      maximizeApp(appName as keyof typeof apps);\r\n    } else {\r\n      openApp(appName as keyof typeof apps);\r\n    }\r\n  };\r\n\r\n  const handleLaunchpadClick = () => {\r\n    if (hiddenItems.length > 0) {\r\n      setIsLaunchpadOpen(!isLaunchpadOpen); // 숨겨진 앱이 있을 때만 Launchpad 모달 열고 닫기\r\n    } else {\r\n      setIsLaunchpadOpen(false); // 숨겨진 앱이 없으면 모달을 닫음\r\n    }\r\n  };\r\n\r\n  const closeLaunchpad = () => {\r\n    setIsLaunchpadOpen(false); // 모달 닫기\r\n  };\r\n\r\n  // 모달 외부 클릭 시 모달을 닫음\r\n  const handleOutsideClick = (e: React.MouseEvent) => {\r\n    const target = e.target as Element;\r\n    if (target.classList.contains('launchpad-modal')) {\r\n      closeLaunchpad();\r\n    }\r\n  };\r\n\r\n  // Launchpad 내에서의 share 앱 상태를 따로 관리 (Launchpad 안에서는 인디케이터 표시 안 함)\r\n  const getLaunchpadAppState = (appName: string) => {\r\n    if (appName === 'share') {\r\n      return isSharing; // share 앱의 경우 인디케이터는 isSharing 상태에 따름\r\n    }\r\n    return apps[appName as keyof typeof apps].isRunning; // Launchpad 내에서도 앱이 실행 중이면 인디케이터 유지\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ToastContainer \r\n        position=\"top-right\" \r\n        autoClose={1200} \r\n        hideProgressBar={true}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n      />\r\n      <div className=\"dock\">\r\n        <div className=\"dock-left\">\r\n          {dockItems.map((item) => (\r\n            !hiddenItems.includes(item.name) && (\r\n              <DockItem\r\n                key={item.name}\r\n                icon={item.icon}\r\n                // share 앱에만 isSharing 적용\r\n                isActive={item.name === 'share' ? isSharing : apps[item.name as keyof typeof apps].isRunning}\r\n                isHidden={hiddenItems.includes(item.name)}\r\n                onClick={() => handleAppOpen(item.name)}\r\n              />\r\n            )\r\n          ))}\r\n        </div>\r\n        <div className=\"dock-left-end\">\r\n          <DockItem\r\n            icon={`${imgUrl}/launchpad.png`}\r\n            isActive={false} // Launchpad 열렸을 때만 인디케이터 활성화\r\n            isHidden={false}\r\n            onClick={handleLaunchpadClick} // Launchpad 클릭 시 모달 열기\r\n          />\r\n        </div>\r\n        <div className=\"dock-right\">\r\n          <DockItem\r\n            icon={`${imgUrl}/bin.png`}\r\n            isActive={false}\r\n            isHidden={false}\r\n            onClick={() => console.log('Bin clicked')}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Launchpad 모달 */}\r\n      {isLaunchpadOpen && hiddenItems.length > 0 && (\r\n        <div className=\"launchpad-modal\" onClick={handleOutsideClick}>\r\n          <div className=\"launchpad-content\">\r\n            <div className=\"hidden-apps\">\r\n              {hiddenItems.map((hiddenItem) => (\r\n                <DockItem\r\n                  key={hiddenItem}\r\n                  icon={dockItems.find(item => item.name === hiddenItem)?.icon || ''}\r\n                  isActive={getLaunchpadAppState(hiddenItem)} // Launchpad 내 숨겨진 앱의 인디케이터만 표시\r\n                  isHidden={false}\r\n                  onClick={() => handleAppOpen(hiddenItem)}\r\n                />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dock;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}